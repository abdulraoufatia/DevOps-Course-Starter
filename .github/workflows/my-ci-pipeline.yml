name: Continuous Integration
on:
  push:
    schedule:
      - cron: '0 0 * * *'
  pull_request:
    branches:
    - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}


jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Running Snyk to check for vulnerabilities
      uses: snyk/actions/python-3.8@master
      env: 
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Running terraform validate
      run: terraform validate    

    - name: Building Test Image
      run: docker build --target test --tag todo_app:test .

    - name: Running Test Image 
      run: docker run --env-file ./.env.test todo_app:test

    - name: Sending Notifications
      uses: act10ns/slack@v1
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with: 
        status: ${{ job.status }}
        channel: '#slack-notifications'
        message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"

    - name: Running terraform apply

    - name: Call Azure CD webhook
      run: curl -X POST ${WEBHOOK_URL}

  
  production:
    name: Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

 
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Setting up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Authenticating DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Pushing to DockerHub
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/todoapp:latest
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/todoapp:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/todoapp:buildcache,mode=max

    - name: Setting up Continious Deployment
      run: curl -dH -X POST ${{ secrets.ARA_TODOAPP }}

    - name: Applying Terraform Initalisation
      run: terraform init

    - name: Call Azure CD webhook
      run: curl -X POST ${WEBHOOK_URL}

    - name: Sending Notifications
      uses: act10ns/slack@v1
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      with: 
        status: ${{ job.status }}
        channel: '#slack-notifications'
        message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"

      
      